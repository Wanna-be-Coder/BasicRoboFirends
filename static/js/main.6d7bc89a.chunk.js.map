{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/extras/Scroll.js","components/extras/MyErrorBoundary.js","components/containers/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","details","key","SearchBox","placeholder","searchChange","searchFields","type","onChange","value","Scroll","props","style","overflowY","height","children","MyErrorBoundary","state","hasError","error","info","this","setState","Component","connect","searchRobots","isPending","requestRobots","dispatch","onChangeSearch","event","payload","target","onRequestRobots","fetch","then","res","json","data","catch","err","useEffect","filterRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6d7bc89a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green dib br3 pr3 ma2 grow bw2 shadow-5'>\n      <img alt='roboimage' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div>\r\n      {robots.map((details) => {\r\n        return (\r\n          <Card\r\n            id={details.id}\r\n            name={details.name}\r\n            email={details.email}\r\n            key={details.name}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ placeholder, searchChange, searchFields }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className='pa3 ba b==green bg-lightest-blue'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={searchChange}\r\n        value={searchFields}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", height: \"800px\" }}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MyErrorBoundary extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hasError: false };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.hasError) {\r\n      return <h1>Opps Something went wrong try afer a few hours</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default MyErrorBoundary;\r\n","import React, { useEffect } from \"react\";\nimport CardList from \"../CardList\";\nimport SearchBox from \"../SearchBox\";\nimport Scroll from \"../extras/Scroll\";\nimport MyErrorBoundary from \"../extras/MyErrorBoundary\";\nimport { setSearchField, requestRobots } from \"../../action\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchFields: state.searchRobots.searchFields,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error,\n  };\n};\nconst mapDispatchtoProps = (dispatch) => {\n  return {\n    onChangeSearch: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch),\n  };\n};\nfunction App(props) {\n  const {\n    searchFields,\n    onChangeSearch,\n    onRequestRobots,\n    robots,\n    isPending,\n  } = props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filterRobots = robots.filter((robot) =>\n    robot.name.toLowerCase().includes(searchFields.toLowerCase())\n  );\n  return (\n    <div className='tc'>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchBox\n        placeholder='Search Robot'\n        searchChange={onChangeSearch}\n        searchFields={searchFields}\n      />\n      <br />\n      {isPending ? (\n        <h1>Loading</h1>\n      ) : (\n        <Scroll>\n          <MyErrorBoundary>\n            <CardList robots={filterRobots} />\n          </MyErrorBoundary>\n        </Scroll>\n      )}\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./constant\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING,\r\n} from \"./constant\";\r\n\r\nconst initialStateSearch = {\r\n  searchFields: \"\",\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: \"\",\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchFields: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/containers/App\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots, requestRobots } from \"./reducer\";\nimport { createLogger } from \"redux-logger\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}