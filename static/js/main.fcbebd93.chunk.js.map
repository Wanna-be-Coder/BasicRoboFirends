{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/extras/Scroll.js","components/extras/MyErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","details","key","SearchBox","placeholder","searchChange","searchFields","type","onChange","value","Scroll","props","style","overflowY","height","children","MyErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setInfo","setSearch","useEffect","fetch","then","res","json","filterRobots","filter","toLowerCase","includes","event","target","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+LAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BL,EAA1B,cACxB,6BACE,4BAAKC,GACL,2BAAIC,MCYGI,MAjBf,YAA+B,IAAXC,EAAU,EAAVA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAACC,GACX,OACE,kBAAC,EAAD,CACET,GAAIS,EAAQT,GACZC,KAAMQ,EAAQR,KACdC,MAAOO,EAAQP,MACfQ,IAAKD,EAAQR,YCIVU,EAdG,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC9C,OACE,6BACE,2BACEX,UAAU,mCACVY,KAAK,SACLH,YAAaA,EACbI,SAAUH,EACVI,MAAOH,MCFAI,EANA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,UAAYH,EAAMI,W,4BCelDC,EAjBf,kDACE,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,UAAU,GAFb,EADhB,8DAKoBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,MAN9B,+BAUI,OAAIG,KAAKH,SACA,8EAEFG,KAAKV,MAAMI,aAbtB,GAAqCQ,a,MC6CtBC,MAxCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNL,EADM,KACAM,EADA,OAEqBD,mBAAS,IAF9B,mBAENnB,EAFM,KAEQqB,EAFR,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC/B,GACL2B,EAAQ3B,QAEX,IACH,IAIMkC,EAAeb,EAAKc,QAAO,SAACnC,GAAD,OAC/BA,EAAON,KAAK0C,cAAcC,SAAS9B,EAAa6B,kBAElD,OACE,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CACES,YAAY,eACZC,aAZiB,SAACgC,GACtBV,EAAUU,EAAMC,OAAO7B,QAYnBH,aAAcA,IAEhB,6BACiB,IAAhBc,EAAKmB,OACJ,uCAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxC,OAAQkC,QC3BVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.fcbebd93.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green dib br3 pr3 ma2 grow bw2 shadow-5'>\n      <img alt='roboimage' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div>\r\n      {robots.map((details) => {\r\n        return (\r\n          <Card\r\n            id={details.id}\r\n            name={details.name}\r\n            email={details.email}\r\n            key={details.name}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ placeholder, searchChange, searchFields }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className='pa3 ba b==green bg-lightest-blue'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={searchChange}\r\n        value={searchFields}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", height: \"800px\" }}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MyErrorBoundary extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hasError: false };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.hasError) {\r\n      return <h1>Opps Something went wrong try afer a few hours</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default MyErrorBoundary;\r\n","import React, { useState, useEffect } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport Scroll from \"./components/extras/Scroll\";\nimport MyErrorBoundary from \"./components/extras/MyErrorBoundary\";\nimport \"./App.css\";\n\nfunction App() {\n  const [info, setInfo] = useState([]);\n  const [searchFields, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((robots) => {\n        setInfo(robots);\n      });\n  }, []);\n  const onChangeSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const filterRobots = info.filter((robots) =>\n    robots.name.toLowerCase().includes(searchFields.toLowerCase())\n  );\n  return (\n    <div className='tc'>\n      <h1 className='f1'>RoboFriends</h1>\n      <SearchBox\n        placeholder='Search Robot'\n        searchChange={onChangeSearch}\n        searchFields={searchFields}\n      />\n      <br />\n      {info.length === 0 ? (\n        <h1>Loading</h1>\n      ) : (\n        <Scroll>\n          <MyErrorBoundary>\n            <CardList robots={filterRobots} />\n          </MyErrorBoundary>\n        </Scroll>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}